{"version":3,"sources":["Func.js","Drawing.Basic.js","Drawing.Line.js","Drawing.Free.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvfile":"Drawing.js","sourcesContent":["window.$$ = window.$$ || {};\r\nwindow.$$.Func = window.$$.Func || {};\r\n\r\n(function (FUNC) {\r\n    \"use strict\";\r\n    FUNC.offsetScreen = function (node) {\r\n        if (node === document.body) return {top:0, left:0};\r\n        var top = node.offsetTop,\r\n            left = node.offsetLeft;\r\n        node = node.parentNode;\r\n        while (node !== document.body) {\r\n            top -= node.scrollTop;\r\n            left -= node.scrollLeft;\r\n            node = node.parentNode;\r\n        }\r\n        return { top: top, left: left };\r\n    };\r\n    \r\n    FUNC.getMousePos = function (e, parent) {\r\n        var pos;\r\n        if (e.pageX == undefined) {\r\n            pos = [e.originalEvent.touches[0].pageX, e.originalEvent.touches[0].pageY];\r\n        } else {\r\n            pos = [e.pageX, e.pageY];\r\n        }\r\n        if (parent != undefined) {\r\n            var offset = FUNC.offsetScreen(parent);\r\n            pos[0] -= offset.left;\r\n            pos[1] -= offset.top;\r\n        }\r\n        return pos;\r\n    };\r\n\r\n})(window.$$.Func);\r\n","/************************************************ \r\nDrawing Library\r\nCopyright (c) 2014-2016 Dongxu Ren  http://www.rendxx.com/\r\n\r\nLicense: MIT (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.4.0\r\nUpdate: 2016-11-14\r\n************************************************/\r\n\r\nwindow.$$ = window.$$ || {};\r\nwindow.$$.Draw = window.$$.Draw || {};\r\n\r\n(function (DRAW) {\r\n\t\"use strict\";\r\n\r\n\tvar Basic = function (container, opts) {\r\n\t\tthis.container = container;\r\n\t\tthis.opts = opts || {};\r\n\t\tthis._canvas = document.createElement('canvas');\r\n\t\tthis._ctx = this._canvas.getContext('2d');\r\n\t\tthis.container.appendChild(this._canvas);\r\n\t\t//if (this.container.style.position != \"relative\" && this.container.style.position != \"absolute\") this.container.style.position = \"relative\";\r\n\t\tthis._canvas.style.position = 'absolute';\r\n\t\tthis._canvas.style.top = '0';\r\n\t\tthis._canvas.style.left = '0';\r\n\t\tif (this.opts.hasOwnProperty(\"zIndex\")) this._canvas.style.zIndex = this.opts.zIndex;\r\n\t\tthis.resize();\r\n\t};\r\n\tBasic.prototype = Object.create(null);\r\n\tBasic.prototype.constructor = Basic;\r\n\r\n\tBasic.prototype.copy = function () {\r\n\t\t// copy the element and return the copy\r\n\t    var copy = new Basic(this.container, para);\r\n\t    copy._ctx.drawImage(this._canvas, 0, 0);\r\n\t\treturn copy;\r\n\t};\r\n\r\n\tBasic.prototype.draw = function () {\r\n\t    // draw element\r\n\t};\r\n\r\n\tBasic.prototype.clear = function () {\r\n\t    // clear the canvas\r\n\t    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n\t};\r\n\r\n\tBasic.prototype.getImage = function () {\r\n\t    // get the canvas image\r\n\t    var image = new Image();\r\n\t    image.src = this._canvas.toDataURL();\r\n\t    return image;\r\n\t};\r\n\r\n\tBasic.prototype.destroy = function () {\r\n\t    // destroy the element and release all memory\r\n\t    this._canvas.parentNode.removeChild(this._canvas);\r\n\t    this._canvas = null;\r\n\t    this._ctx = null;\r\n\t};\r\n\r\n\tBasic.prototype.resize = function () {\r\n\t    // resize the canvas\r\n\t    this._canvas.width = this.container.offsetWidth;\r\n\t    this._canvas.height = this.container.offsetHeight;\r\n\t};\r\n\r\n\tDRAW.Basic = Basic;\r\n})(window.$$.Draw);\r\n","/************************************************ \r\nDrawing Library\r\nCopyright (c) 2014-2016 Dongxu Ren  http://www.rendxx.com/\r\n\r\nLicense: MIT (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.4.0\r\nUpdate: 2016-11-14\r\n************************************************/\r\n\r\nwindow.$$ = window.$$ || {};\r\nwindow.$$.Draw = window.$$.Draw || {};\r\n\r\n(function (DRAW) {\r\n    \"use strict\";\r\n\r\n    var Line = function (container, opts) {\r\n        DRAW.Basic.call(this, container, opts);\r\n        this.start = null;\r\n        this.end = null;\r\n    };\r\n    Line.prototype = Object.create(DRAW.Basic.prototype);\r\n    Line.prototype.constructor = Line;\r\n\r\n    Line.prototype.copy = function () {\r\n        var copy = DRAW.Basic.prototype.copy.call(this);\r\n        copy.start = this.start;\r\n        copy.end = this.end;\r\n    };\r\n\r\n    Line.prototype.draw = function (start, end, para) {\r\n        // draw element\r\n        if (start == null || end == null) throw new Error(\"parameter error\");\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this.start = start;\r\n        this.end = end;\r\n\r\n        var para = para || {};\r\n        for (var i in para) this._ctx[i] = para[i];\r\n        var image = para.image || null;\r\n\r\n        if (image == null) {\r\n            this._ctx.beginPath();\r\n            this._ctx.moveTo(start[0], start[1]);\r\n            this._ctx.lineTo(end[0], end[1]);\r\n            this._ctx.stroke();\r\n            return;\r\n        }\r\n        \r\n        var lineWidth = para.lineWidth || 1;\r\n        var x = start[0] - end[0];\r\n        var y = start[1] - end[1];\r\n        var len = Math.sqrt(x*x+y*y);\r\n        var angle = Math.atan2(x, -y);\r\n        var offset = -image.width / 2;\r\n        var wid = Math.min(image.width, lineWidth);\r\n        var left = Math.max((image.width - lineWidth)/2, 0);\r\n\r\n        this._ctx.translate(start[0], start[1]);\r\n        this._ctx.rotate(angle);\r\n\r\n        this._ctx.translate(offset, 0);\r\n        this._ctx.fillStyle = this._ctx.createPattern(image, 'repeat-y');\r\n        this._ctx.fillRect(left, 0, wid, len);\r\n        this._ctx.translate(-offset, 0);\r\n\r\n        this._ctx.rotate(-angle);\r\n        this._ctx.translate(-start[0] , -start[1]);\r\n    };\r\n\r\n    DRAW.Line = Line;\r\n})(window.$$.Draw);\r\n","/************************************************ \r\nDrawing Library\r\nCopyright (c) 2014-2016 Dongxu Ren  http://www.rendxx.com/\r\n\r\nLicense: MIT (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.4.0\r\nUpdate: 2016-11-14\r\n************************************************/\r\n\r\nwindow.$$ = window.$$ || {};\r\nwindow.$$.Draw = window.$$.Draw || {};\r\n\r\n(function (DRAW, FUNC) {\r\n    \"use strict\";\r\n\r\n    var FreeDraw = function (container, opts) {\r\n        DRAW.Basic.call(this, container, opts);\r\n        this._canvas2 = document.createElement('canvas');\r\n        this._canvas2.style.position = 'absolute';\r\n        this._canvas2.style.top = '0';\r\n        this._canvas2.style.left = '0';\r\n        this._canvas2.style.zIndex = (this._canvas.style.zIndex || 0)+1;\r\n        this._ctx2 = this._canvas2.getContext('2d');\r\n        container.appendChild(this._canvas2);\r\n\r\n        this._controlPos = null;\r\n        this._lastPos = null;\r\n        this._isDrawing = false;\r\n\r\n        this._setupBinding();\r\n        this.resize();\r\n    };\r\n    FreeDraw.prototype = Object.create(DRAW.Basic.prototype);\r\n    FreeDraw.prototype.constructor = FreeDraw;\r\n\r\n    FreeDraw.prototype.startDrawing = function (para) {\r\n        // draw element\r\n        var para = para || {};\r\n        for (var i in para) {\r\n            this._ctx[i] = para[i];\r\n            this._ctx2[i] = para[i];\r\n        }\r\n        this._ctx.beginPath();\r\n        this._ctx2.beginPath();\r\n        this._startPos = null;\r\n        this._isDrawing = true;\r\n\r\n        this.container.addEventListener(\"mousemove\", this._fn_draw, false);\r\n    };\r\n\r\n    FreeDraw.prototype.stopDrawing = function () {\r\n        this._startPos = null;\r\n        this.container.removeEventListener(\"mousemove\", this._fn_draw, false);\r\n        \r\n        this._ctx2.clearRect(0, 0, this._canvas2.width, this._canvas2.height);\r\n        if (this._lastPos !== null && this._controlPos!==null) {\r\n            this._ctx.quadraticCurveTo(this._controlPos[0], this._controlPos[1], (this._controlPos[0] + this._lastPos[0]) >> 1, (this._controlPos[1] + this._lastPos[1]) >> 1);\r\n            this._ctx.stroke();\r\n        }\r\n        this._lastPos = null;\r\n    };\r\n\r\n    FreeDraw.prototype._setupBinding = function () {\r\n        var that = this;\r\n        //https://github.com/hongru/Canvas-Tattle/issues/19\r\n        this._startPos = null;\r\n        this._controlPos = null;\r\n        var _controlPos2 = null;\r\n\r\n        this._fn_draw = function (e) {\r\n            var mousePos = FUNC.getMousePos(e, this);\r\n            that._lastPos = mousePos;\r\n            if (that._startPos === null) {\r\n                that._startPos = mousePos;\r\n                that._ctx.moveTo(mousePos[0], mousePos[1]);\r\n                that._ctx2.moveTo(mousePos[0], mousePos[1]);\r\n                that._controlPos = null;\r\n                _controlPos2 = null;\r\n                return false;\r\n            } else if (that._controlPos === null) {\r\n                that._controlPos = mousePos;\r\n                _controlPos2 = mousePos;\r\n                return false;\r\n            }\r\n            if (that._isDrawing || (Math.pow(mousePos[0] - that._controlPos[0], 2) + Math.pow(mousePos[1] - that._controlPos[1], 2) >= 400)) {\r\n                that._ctx2.clearRect(0, 0, that._canvas2.width, that._canvas2.height);\r\n                that._ctx2.beginPath();\r\n\r\n                var end = [(that._controlPos[0] + mousePos[0]) >> 1, (that._controlPos[1] + mousePos[1]) >> 1];\r\n                that._ctx2.moveTo(end[0], end[1]);\r\n                that._isDrawing = false;\r\n                that._ctx.quadraticCurveTo(that._controlPos[0], that._controlPos[1], end[0], end[1]);\r\n                that._ctx.stroke();\r\n                that._controlPos = mousePos;\r\n                setTimeout(function () { that._isDrawing = true; }, 100);\r\n            } else {\r\n                that._ctx2.quadraticCurveTo(_controlPos2[0], _controlPos2[1], (_controlPos2[0] + mousePos[0]) >> 1, (_controlPos2[1] + mousePos[1]) >> 1);\r\n                that._ctx2.stroke();\r\n                _controlPos2 = mousePos;\r\n            }\r\n\r\n            return false;\r\n        };\r\n    };\r\n\r\n    FreeDraw.prototype.resize = function () {\r\n        DRAW.Basic.prototype.resize.call(this);\r\n        if (this._canvas2 != null) {\r\n            this._canvas2.width = this.container.offsetWidth;\r\n            this._canvas2.height = this.container.offsetHeight;\r\n        }\r\n    };\r\n\r\n    FreeDraw.prototype.destroy = function () {\r\n        DRAW.Basic.prototype.destroy.call(this);\r\n        this._canvas2.parentNode.removeChild(this._canvas2);\r\n        this._canvas2 = null;\r\n        this._ctx2 = null;\r\n    };\r\n\r\n    DRAW.FreeDraw = FreeDraw;\r\n})(window.$$.Draw, window.$$.Func);\r\n"],"sourceRoot":"/source/"}